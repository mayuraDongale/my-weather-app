(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[17882],{112865:function(e,n,a){"use strict";a.r(n),a.d(n,{default:function(){return d}});var s={};a.r(s),a.d(s,{demoComponents:function(){return i},demos:function(){return c},docs:function(){return p},srcComponents:function(){return l}});var o=a(295649);a(827378);var t=a(669595),p={en:{description:"We have learned a great deal regarding how MUI is used, and the v1 rewrite allowed us to completely rethink the component API.",location:"/docs/data/material/guides/api/api.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n<symbol id="comment-link-icon" viewBox="0 0 24 24">\n  <path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 14v-2.47l6.88-6.88c.2-.2.51-.2.71 0l1.77 1.77c.2.2.2.51 0 .71L8.47 14H6zm12 0h-7.5l2-2H18v2z" />\n</symbol>\n</svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>API design approach</h1><p class="description">We have learned a great deal regarding how MUI is used, and the v1 rewrite allowed us to completely rethink the component API.</p>\n\n<aside class="MuiCallout-root MuiCallout-info"><p>API design is hard because you can make it seem simple but it&#39;s actually deceptively complex, or make it actually simple but seem complex.</p>\n\n</aside><p><a href="https://twitter.com/sebmarkbage/status/728433349337841665">@sebmarkbage</a></p>\n<p>As Sebastian Markbage <a href="https://2014.jsconf.eu/speakers/sebastian-markbage-minimal-api-surface-area-learning-patterns-instead-of-frameworks.html">pointed out</a>, no abstraction is superior to wrong abstractions.\nWe are providing low-level components to maximize composition capabilities.</p>\n<h2 id="composition">Composition<a aria-labelledby="composition" class="anchor-link" href="#composition" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="composition"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>You may have noticed some inconsistency in the API regarding composing components.\nTo provide some transparency, we have been using the following rules when designing the API:</p>\n<ol>\n<li>Using the <code>children</code> prop is the idiomatic way to do composition with React.</li>\n<li>Sometimes we only need limited child composition, for instance when we don&#39;t need to allow child order permutations.\nIn this case, providing explicit props makes the implementation simpler and more performant; for example, the <code>Tab</code> takes an <code>icon</code> and a <code>label</code> prop.</li>\n<li>API consistency matters.</li>\n</ol>\n<h2 id="rules">Rules<a aria-labelledby="rules" class="anchor-link" href="#rules" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="rules"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>Aside from the above composition trade-off, we enforce the following rules:</p>\n<h3 id="spread">Spread<a aria-labelledby="spread" class="anchor-link" href="#spread" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="spread"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>Props supplied to a component which are not explicitly documented are spread to the root element;\nfor instance, the <code>className</code> prop is applied to the root.</p>\n<p>Now, let&#39;s say you want to disable the ripples on the <code>MenuItem</code>.\nYou can take advantage of the spread behavior:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MenuItem</span></span> <span class="token attr-name">disableRipple</span> <span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>The <code>disableRipple</code> prop will flow this way: <a href="/material-ui/api/menu-item/"><code>MenuItem</code></a> &gt; <a href="/material-ui/api/list-item/"><code>ListItem</code></a> &gt; <a href="/material-ui/api/button-base/"><code>ButtonBase</code></a>.</p>\n<h3 id="native-properties">Native properties<a aria-labelledby="native-properties" class="anchor-link" href="#native-properties" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="native-properties"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>We avoid documenting native properties supported by the DOM like <a href="/material-ui/customization/how-to-customize/#overriding-styles-with-class-names"><code>className</code></a>.</p>\n<h3 id="css-classes">CSS Classes<a aria-labelledby="css-classes" class="anchor-link" href="#css-classes" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="css-classes"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>All components accept a <a href="/material-ui/customization/how-to-customize/#overriding-styles-with-class-names"><code>classes</code></a> prop to customize the styles.\nThe classes design answers two constraints:\nto make the classes structure as simple as possible, while sufficient to implement the Material Design guidelines.</p>\n<ul>\n<li>The class applied to the root element is always called <code>root</code>.</li>\n<li>All the default styles are grouped in a single class.</li>\n<li>The classes applied to non-root elements are prefixed with the name of the element, e.g. <code>paperWidthXs</code> in the Dialog component.</li>\n<li>The variants applied by a boolean prop <strong>aren&#39;t</strong> prefixed, e.g. the <code>rounded</code> class\napplied by the <code>rounded</code> prop.</li>\n<li>The variants applied by an enum prop <strong>are</strong> prefixed, e.g. the <code>colorPrimary</code> class\napplied by the <code>color=&quot;primary&quot;</code> prop.</li>\n<li>A variant has <strong>one level of specificity</strong>.\nThe <code>color</code> and <code>variant</code> props are considered a variant.\nThe lower the style specificity is, the simpler it is to override.</li>\n<li>We increase the specificity for a variant modifier.\nWe already <strong>have to do it</strong> for the pseudo-classes (<code>:hover</code>, <code>:focus</code>, etc.).\nIt allows much more control at the cost of more boilerplate.\nHopefully, it&#39;s also more intuitive.</li>\n</ul>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">color</span><span class="token operator">:</span> green<span class="token punctuation">[</span><span class="token number">600</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token string-property property">\'&amp;$checked\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">color</span><span class="token operator">:</span> green<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">checked</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h3 id="nested-components">Nested components<a aria-labelledby="nested-components" class="anchor-link" href="#nested-components" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="nested-components"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>Nested components inside a component have:</p>\n<ul>\n<li>their own flattened props when these are key to the top level component abstraction,\nfor instance an <code>id</code> prop for the <code>Input</code> component.</li>\n<li>their own <code>xxxProps</code> prop when users might need to tweak the internal render method&#39;s sub-components,\nfor instance, exposing the <code>inputProps</code> and <code>InputProps</code> props on components that use <code>Input</code> internally.</li>\n<li>their own <code>xxxComponent</code> prop for performing component injection.</li>\n<li>their own <code>xxxRef</code> prop when you might need to perform imperative actions,\nfor instance, exposing an <code>inputRef</code> prop to access the native <code>input</code> on the <code>Input</code> component.\nThis helps answer the question <a href="/material-ui/getting-started/faq/#how-can-i-access-the-dom-element">&quot;How can I access the DOM element?&quot;</a></li>\n</ul>\n<h3 id="prop-naming">Prop naming<a aria-labelledby="prop-naming" class="anchor-link" href="#prop-naming" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="prop-naming"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><ul>\n<li><p><strong>Boolean</strong></p>\n<ul>\n<li><p>The default value of a boolean prop should be <code>false</code>. This allows for better shorthand notation. Consider an example of an input that is enabled by default. How should you name the prop that controls this state? It should be called <code>disabled</code>:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx">❌ <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token attr-name">enabled</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n✅ <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token attr-name">disabled</span> <span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n</li>\n<li><p>If the name of the boolean is a single word, it should be an adjective or a noun rather than a verb. This is because props describe <em>states</em> and not <em>actions</em>. For example an input prop can be controlled by a state, which wouldn&#39;t be described with a verb:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>disabled<span class="token punctuation">,</span> setDisabled<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n❌ <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token attr-name">disable</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>disabled<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n✅ <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token attr-name">disabled</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>disabled<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id="controlled-components">Controlled components<a aria-labelledby="controlled-components" class="anchor-link" href="#controlled-components" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="controlled-components"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>Most of the controlled component are controlled via the <code>value</code> and the <code>onChange</code> props,\nhowever, the <code>open</code> / <code>onClose</code> / <code>onOpen</code> combination is used for display related state.\nIn the cases where there are more events, we put the noun first, and then the verb, for example: <code>onPageChange</code>, <code>onRowsChange</code>.</p>\n<h3 id="boolean-vs-enum">boolean vs. enum<a aria-labelledby="boolean-vs-enum" class="anchor-link" href="#boolean-vs-enum" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="boolean-vs-enum"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>There are two options to design the API for the variations of a component: with a <em>boolean</em>; or with an <em>enum</em>.\nFor example, let&#39;s take a button that has different types. Each option has its pros and cons:</p>\n<ul>\n<li><p>Option 1 <em>boolean</em>:</p>\n<div class="MuiCode-root"><pre><code class="language-tsx">type Props <span class="token operator">=</span> <span class="token punctuation">{</span>\n  contained<span class="token operator">:</span> boolean<span class="token punctuation">;</span>\n  fab<span class="token operator">:</span> boolean<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>This API enables the shorthand notation:\n<code>&lt;Button&gt;</code>, <code>&lt;Button contained /&gt;</code>, <code>&lt;Button fab /&gt;</code>.</p>\n</li>\n<li><p>Option 2 <em>enum</em>:</p>\n<div class="MuiCode-root"><pre><code class="language-tsx">type Props <span class="token operator">=</span> <span class="token punctuation">{</span>\n  variant<span class="token operator">:</span> <span class="token string">\'text\'</span> <span class="token operator">|</span> <span class="token string">\'contained\'</span> <span class="token operator">|</span> <span class="token string">\'fab\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>This API is more verbose:\n<code>&lt;Button&gt;</code>, <code>&lt;Button variant=&quot;contained&quot;&gt;</code>, <code>&lt;Button variant=&quot;fab&quot;&gt;</code>.</p>\n<p>However, it prevents an invalid combination from being used,\nbounds the number of props exposed,\nand can easily support new values in the future.</p>\n</li>\n</ul>\n<p>The MUI components use a combination of the two approaches according to the following rules:</p>\n<ul>\n<li>A <em>boolean</em> is used when <strong>2</strong> possible values are required.</li>\n<li>An <em>enum</em> is used when <strong>&gt; 2</strong> possible values are required, or if there is the possibility that additional possible values may be required in the future.</li>\n</ul>\n<p>Going back to the previous button example; since it requires 3 possible values, we use an <em>enum</em>.</p>\n<h3 id="ref">Ref<a aria-labelledby="ref" class="anchor-link" href="#ref" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="ref"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>The <code>ref</code> is forwarded to the root element. This means that, without changing the rendered root element\nvia the <code>component</code> prop, it is forwarded to the outermost DOM element which the component\nrenders. If you pass a different component via the <code>component</code> prop, the ref will be attached\nto that component instead.</p>\n<h2 id="glossary">Glossary<a aria-labelledby="glossary" class="anchor-link" href="#glossary" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="glossary"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><ul>\n<li><strong>host component</strong>: a DOM node type in the context of <code>react-dom</code>, e.g. a <code>&#39;div&#39;</code>. See also <a href="https://reactjs.org/docs/implementation-notes.html#mounting-host-elements">React Implementation Notes</a>.</li>\n<li><strong>host element</strong>: a DOM node in the context of <code>react-dom</code>, e.g. an instance of <code>window.HTMLDivElement</code>.</li>\n<li><strong>outermost</strong>: The first component when reading the component tree from top to bottom i.e. breadth-first search.</li>\n<li><strong>root component</strong>: the outermost component that renders a host component.</li>\n<li><strong>root element</strong>: the outermost element that renders a host component.</li>\n</ul>\n'],toc:[{text:"Composition",level:2,hash:"composition",children:[]},{text:"Rules",level:2,hash:"rules",children:[{text:"Spread",level:3,hash:"spread"},{text:"Native properties",level:3,hash:"native-properties"},{text:"CSS Classes",level:3,hash:"css-classes"},{text:"Nested components",level:3,hash:"nested-components"},{text:"Prop naming",level:3,hash:"prop-naming"},{text:"Controlled components",level:3,hash:"controlled-components"},{text:"boolean vs. enum",level:3,hash:"boolean-vs-enum"},{text:"Ref",level:3,hash:"ref"}]},{text:"Glossary",level:2,hash:"glossary",children:[]}],title:"API design approach",headers:{components:[]}}},c={};c.scope={process:{},import:{}};var i={},l={},r=a(824246);function d(){return(0,r.jsx)(t.Z,(0,o.Z)({},s))}},640532:function(e,n,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/material-ui/guides/api",function(){return a(112865)}])}},function(e){e.O(0,[75760,36634,31194,35408,85992,56063,76957,41253,46888,21829,81125,68256,96387,8406,82251,70116,73793,16402,86277,49983,58156,76822,78723,69595,49774,92888,40179],function(){return e(e.s=640532)}),_N_E=e.O()}]);